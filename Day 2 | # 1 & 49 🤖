1. Two Sum
*** Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. ***

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:
  Input: nums = [2,7,11,15], target = 9
    Output: [0,1]
      Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
  Input: nums = [3,2,4], target = 6
    Output: [1,2]
----------------------------------------------------------------------------------
class Solution {
    public int[] twoSum(int[] nums, int target) {
          for ( int i=0 ; i < nums.length; i++) {
            for( int j = i+1; j < nums.length; j++) {
                if ( nums[i]  + nums[j] == target) {
                    return new int[]{i , j}; 
                }
            }
            }
                return new int[]{};
          }
    }


49. Grouped AnaGram
*** Given an array of strings strs, group the anagrams together. You can return the answer in any order.***
Example 1:
  Input: strs = ["eat","tea","tan","ate","nat","bat"]
    Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Explanation:
There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.

Example 2:
  Input: strs = [""]
    Output: [[""]]
------------------------------------------------------

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        // Initialize the result list
        List<List<String>> result = new ArrayList<>();
        
        // Create a HashMap to group anagrams by their sorted string
        HashMap<String, List<String>> map = new HashMap<>();
        
        // Iterate over the input array using a regular for loop
        for (int i = 0; i < strs.length; i++) {
            String s = strs[i];
            
            // Sort the string to use as a key
            char[] chars = s.toCharArray();
            Arrays.sort(chars);
            String sortedString = new String(chars);
            
            // If the sorted string is not already in the map, create a new list
            if (!map.containsKey(sortedString)) {
                map.put(sortedString, new ArrayList<>());
            }
            
            // Add the original string to the corresponding list in the map
            map.get(sortedString).add(s);
        }
        
        // Add all the lists from the map to the result list
        for (String key : map.keySet()) {
            result.add(map.get(key));
        }
        
        return result;
    }
}
